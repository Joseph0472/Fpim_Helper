[{"D:\\CodeStuff\\fpim_helper\\frontend\\src\\index.js":"1","D:\\CodeStuff\\fpim_helper\\frontend\\src\\App.js":"2","D:\\CodeStuff\\fpim_helper\\frontend\\src\\components\\ItemQuery.js":"3","D:\\CodeStuff\\fpim_helper\\frontend\\src\\components\\ItemLoadAndUpdate.js":"4","D:\\CodeStuff\\fpim_helper\\frontend\\src\\components\\ScrollToTopBtn.js":"5","D:\\CodeStuff\\fpim_helper\\frontend\\src\\api\\dataRetrive.js":"6"},{"size":221,"mtime":1628830669869,"results":"7","hashOfConfig":"8"},{"size":283,"mtime":1629554094091,"results":"9","hashOfConfig":"8"},{"size":3978,"mtime":1629758808060,"results":"10","hashOfConfig":"8"},{"size":3323,"mtime":1629768071255,"results":"11","hashOfConfig":"8"},{"size":307,"mtime":1629468055137,"results":"12","hashOfConfig":"8"},{"size":1214,"mtime":1629760150404,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"dqcdgo",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\CodeStuff\\fpim_helper\\frontend\\src\\index.js",[],["29","30"],"D:\\CodeStuff\\fpim_helper\\frontend\\src\\App.js",["31"],"import React, {useState} from 'react';\nimport ItemQuery from './components/ItemQuery.js';\nimport ItemLoadAndUpdate from './components/ItemLoadAndUpdate'\n\n\nconst App = () => {\n  return (\n    <div>\n      <ItemLoadAndUpdate />\n      <ItemQuery />\n    </div>\n  );\n}\n\nexport default App;\n","D:\\CodeStuff\\fpim_helper\\frontend\\src\\components\\ItemQuery.js",["32"],"import React, {useEffect, useState} from 'react'\nimport { searchByKeyWords } from '../api/dataRetrive'\nimport ScrollToTopBtn from './ScrollToTopBtn'\n\nconst ItemQuery = () => {\n  const [itemInfo, setItemInfo] = useState({\n    manufacturerPartNum:\"\", // Can be one link code\n    functionalName: \"\",\n    variant: \"\",\n    subBrandName: \"\",\n    brandName: \"\",\n  })\n  const [items, setItems] = useState([])\n  const [itemsOtherSource, setItemsOtherSource] = useState([])\n\n  // Debounced request sending\n  const debounce = (fn, delay) => {\n    var timer;\n    return (e)=>{\n      if(timer) {\n        clearTimeout(timer);\n      }\n      timer = setTimeout(() => {\n        fn(e);\n      }, delay);\n    }\n  }\n\n  const updateQueryInfo = (e) => {    \n      setItemInfo({...itemInfo, [e.target.name]: e.target.value})\n  }\n\n  var inputDebounceFn = debounce(updateQueryInfo, 500);\n  \n\n  const handleClick = (e) => {\n    setItemInfo({\n      manufacturerPartNum:\"\",\n      functionalName: \"\",\n      variant: \"\",\n      subBrandName: \"\",\n      brandName: \"\",\n    })\n  }\n\n  useEffect(async ()=>{\n    var data = await searchByKeyWords(itemInfo);\n    await setItems(data.fpim)\n    await setItemsOtherSource(data.onelink)\n  },[itemInfo])\n    \n  return (\n      <div className=\"queryContainer\">\n        <div className=\"inputContainer\">\n          <input className=\"input\" name=\"manufacturerPartNum\" placeholder=\"Manufacturer Part Number\" onKeyUp={(e) => {inputDebounceFn(e)}}></input>\n          <input className=\"input\" name=\"functionalName\" placeholder=\"Functional Name\" onKeyUp={(e) => {inputDebounceFn(e)}}></input>\n          <input className=\"input\" name=\"variant\" placeholder=\"Variant\" onKeyUp={(e) => {inputDebounceFn(e)}}></input>\n          <input className=\"input\" name=\"subBrandName\" placeholder=\"Sub Brand Name\" onKeyUp={(e) => {inputDebounceFn(e)}}></input>\n          <input className=\"input\" name=\"brandName\" placeholder=\"Brand Name\" onKeyUp={(e) => {inputDebounceFn(e)}}></input>\n          <button onClick={handleClick}>Clear All</button>\n        </div>\n        <div className=\"resultContainer\">\n          {items.length !== 0 || itemsOtherSource.length !== 0?\n            <table>\n              <tr>\n                <th>Item Number</th>\n                <th>Manu Number</th>\n                <th>Functional Name</th>\n                <th>Variant</th>\n                <th>Sub Brand Name</th>\n                <th>Brand Name</th>\n                <th>Net Content</th>\n              </tr>\n              {items.length <= 10000 ? items.map(element => \n              <tbody>\n                <td>{element.itemNumber}</td>\n                {/* <td>{element.itemDescription}</td> */}\n                <td>{element.manufacturerPartNum}</td>\n                <td>{element.functionalName}</td>\n                <td>{element.variant}</td>\n                <td>{element.subBrandName}</td>\n                <td>{element.brandName}</td>\n                <td>{element.netContent}</td>\n              </tbody>\n              ) : <tr><h1>Too many results, add details</h1></tr>}\n              <br/>\n              <br/>\n              <h3><strong>OneLink</strong></h3>\n              <br/>\n              <br/>\n              <tr>\n                <th>Manu Number</th>\n                <th>Onelink Code</th>\n                <th>Description</th>\n                <th>Brand Name</th>\n                <th>Net Content</th>\n              </tr>\n              {itemsOtherSource.length <= 10000 ? itemsOtherSource.map(element => \n              <tbody>\n                <td>{element.manufacturerPartNum}</td>\n                <td>{element.onelinkCode}</td>\n                <td>{element.description}</td>\n                <td>{element.brandName}</td>\n                <td>{element.netContent}</td>\n              </tbody>\n              ): <tr><h1>Too many results, add details</h1></tr>}\n          </table>\n          :\n          <div><p>No results found.</p></div>}\n        </div>\n        <ScrollToTopBtn />\n      </div>\n  )\n}\n\nexport default ItemQuery\n","D:\\CodeStuff\\fpim_helper\\frontend\\src\\components\\ItemLoadAndUpdate.js",["33"],"D:\\CodeStuff\\fpim_helper\\frontend\\src\\components\\ScrollToTopBtn.js",[],"D:\\CodeStuff\\fpim_helper\\frontend\\src\\api\\dataRetrive.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":16,"nodeType":"40","messageId":"41","endLine":1,"endColumn":24},{"ruleId":"42","severity":1,"message":"43","line":46,"column":13,"nodeType":"44","endLine":50,"endColumn":4},{"ruleId":"42","severity":1,"message":"43","line":30,"column":15,"nodeType":"44","endLine":33,"endColumn":6},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-global-assign","no-unsafe-negation"]